<?php
/**
 * @file
 * Enables admins to select a node that is displayed in maintenance mode.
 *
 * @author Christian Hanne <hanne@laborb.de>
 * @link http://www.laborb.de
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function maintenance_node_form_system_site_maintenance_mode_alter(&$form, &$form_state, $form_id) {
  $options = array(t('Select a maintenance node...'));

  $results = db_query("SELECT nid, title FROM {node} WHERE status = :status ORDER BY title ASC", array(':status' => NODE_PUBLISHED));
  foreach ($results as $result) {
    $options[$result->nid] = $result->title;
  }

  $maintenance_node_id = variable_get('maintenance_node', 0);
  $form['maintenance_node'] = array(
    '#type' => 'select',
    '#title' => t('Maintenance node'),
    '#description' => t('Select a node you would like to use as a maintenance page.'),
    '#default_value' => $maintenance_node_id,
    '#options' => $options,
  );

  // Disable the maintenance mode message, as it will be filled automatically.
  if ($maintenance_node_id != 0) {
    $form['maintenance_mode_message']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_node_update().
 */
function maintenance_node_node_update($node) {
  maintenance_node_update_cache($node->nid);
}

/**
 * Implements hook_node_delete().
 */
function maintenance_node_node_delete($node) {
  maintenance_node_update_cache($node->nid, TRUE);
}

/**
 * Helper function to decide if the cache should be emptied.
 */
function maintenance_node_update_cache($nid, $delete = FALSE) {
  $maintenance_node_id = variable_get('maintenance_node', 0);
  if ($nid == $maintenance_node_id) {
    maintenance_node_clear_cache_on_submit();

    if ($delete) {
      variable_set('maintenance_node', 0);
    }
  }
}

/**
 * Clears all previously cached maintenance nodes.
 */
function maintenance_node_clear_cache_on_submit() {
  cache_clear_all('maintenance_node_*', 'cache', TRUE);
}

/**
 * Prepares the maintenance node for display on the maintenance page.
 */
function maintenance_node_preprocess_maintenance_page(&$variables) {
  global $language;

  $maintenance_node_id = variable_get('maintenance_node', 0);
  if ($maintenance_node_id != 0 && strpos($_SERVER['SCRIPT_NAME'], 'update.php') === FALSE) {
    $cache_id = 'maintenance_node';
    $cache_id .= '_' . $maintenance_node_id;
    $cache_id .= '_' . $language->language;

    $cache = cache_get($cache_id);
    if (!$cache) {
      if (function_exists('translation_node_get_translations')) {
        $langcode = $language->language;

        $base_node = node_load($maintenance_node_id);
        $translations = translation_node_get_translations($base_node->tnid);
        $node = (isset($translations[$langcode]) ? node_load($translations[$langcode]->nid) : $base_node);
      }
      else {
        $node = node_load($maintenance_node_id);
      }

      $node_show = node_show($node);
      $node_rendered = render($node_show);
      cache_set($cache_id, $node_rendered);
    }
    else {
      $node_rendered = $cache->data;
    }

    $variables['content'] = $node_rendered;
  }
}

/**
 * Adds some variables to the node template for the maintenance node.
 * Themers will be able to determin if the current node is a maintenance node.
 */
function maintenance_node_preprocess_node(&$variables) {
  $maintenance_nid = variable_get('maintenance_node', 0);

  $is_maintenance_node = ($variables['nid'] == $maintenance_nid);
  $is_maintenance_translation = ($variables['tnid'] == $maintenance_nid);
  $is_not_zero = $maintenance_nid != 0;

  $variables['is_maintenance_node'] = ($is_maintenance_node || $is_maintenance_translation) && $is_not_zero;
  if ($variables['is_maintenance_node']) {
    $variables['classes_array'][] = 'maintenance-node';
  }
}